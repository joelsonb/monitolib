<?php
define('MONITOLIB_ROOT_PATH', substr(__FILE__, 0, (strrpos(str_replace('\\', '/', __FILE__), '/') + 1)));
define('MONITOLIB_ROOT_URL', substr($_SERVER['PHP_SELF'], 0, (strrpos(str_replace('\\', '/', $_SERVER['PHP_SELF']), '/') + 1)));

// function to autoload classes
function MonitoAutoload ($className)
{
    $dir = 'src' . DIRECTORY_SEPARATOR;

    if (substr($className, 0, 5) === 'cache') {
        $dir = '';
    }
    
    $file = MONITOLIB_ROOT_PATH . DIRECTORY_SEPARATOR . $dir . str_replace('\\', '/', $className) . '.php';

    if (is_readable($file)) {
        require $file;
    }
}

// print_r($_SERVER);

// Registers autoload function
spl_autoload_register('MonitoAutoload');

// Loads composer autoload class
require MONITOLIB_ROOT_PATH . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';

// Busca os arquivos de rota
foreach (glob(\MonitoLib\App::getConfigPath() . '*routes.php') as $filename) {
    require_once $filename;
}

try {
    $command = $argv[1];

    \MonitoLib\App::setIsLoggedIn(true);
    \MonitoLib\App::setHasPrivileges(true);
    \Security\controller\User::setUserId(14);

    $request = \MonitoLib\Request::getInstance();
    $request->setRequestUri($command);
    $router = \MonitoLib\Router::check($request);

    $class  = $router->class;
    $method = $router->method;
    $class  = new $class;

    $return = $class->$method(...$router->params);
    \MonitoLib\Dev::pre($return);
} catch (\Exception $e) {
    echo $e->getMessage();
}
