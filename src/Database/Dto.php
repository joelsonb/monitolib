<?php
namespace vendor\ldm\Database;

class Dto
{
	const VERSION = '1.0.0';
	/**
	 * 1.0.0 - 2017-06-18
	 * initial release
	 */

	private $object;

	public function __construct ($array)
	{
		$this->keys = isset($array[0]) && is_array($array[0]) ? array_keys($array[0]) : array_keys($array);
		sort($this->keys);
		$this->crc = sha1(serialize($this->keys));

		$this->data = $array;

		if (!file_exists(JL_SITE_PATH . 'cache' . DIRECTORY_SEPARATOR . "dto{$this->crc}.php"))
		{
			$this->createDto($this->keys);
		}
	}
	public function createDto ($array)
	{
		$output = "<?php\n"
			. "/**\n"
			. '* DTO class autogenerated at ' . date('c') . "\n"
			. "*/\n"
			. "\n"
			. "namespace cache;\n"
			. "\n"
			. "class dto$this->crc\n"
			. "{\n"
			;

		$prp = '';
		$get = '';
		$set = '';

		foreach ($array as $f)
		{
			$f = \vendor\ldm\Functions::toLowerCamelCase($f);
			$g = 'get' . ucfirst($f);
			$s = 'set' . ucfirst($f);

			$prp .= "\tprivate \$$f;\n";

			$get .= "\t/**\n"
				. "\t* $g()\n"
				. "\t*\n"
				. "\t* @return \$$f\n"
				. "\t*/\n"
				. "\tpublic function $g ()\n"
				. "\t{\n"
				. "\t\treturn \$this->$f;\n"
				. "\t}\n"
				;

			$set .= "\t/**\n"
				. "\t* $s()\n"
				. "\t*\n"
				. "\t* @return \$this\n"
				. "\t*/\n"
				. "\tpublic function $s (\$$f)\n"
				. "\t{\n"
				. "\t\t\$this->$f = \$$f;\n"
				. "\t\treturn \$this;\n"
				. "\t}\n"
				;
		}

		$output .= $prp . $get . $set . "}";

		if (!@file_put_contents(JL_SITE_PATH . 'cache' . DIRECTORY_SEPARATOR . "dto{$this->crc}.php", $output))
		{
			throw new \Exception("Error while saving cache data!");
		}
	}
	public function getData ()
	{
		$dto = "\cache\\dto{$this->crc}";

		if (isset($this->data[0]) && is_array($this->data[0]))
		{
			$data = [];

			foreach ($this->data as $res)
			{
				$dto = new $dto;

				foreach ($res as $k => $v)
				{
					$set = 'set' . ucfirst(\vendor\ldm\Functions::toLowerCamelCase($k));
					$dto->$set($v);
				}

				$data[] = $dto;
			}

			return $data;
		}

		return 'new $dto';
	}
}